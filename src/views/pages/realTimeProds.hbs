<div>
    {{> header}}
    <section class="container" style="min-height: 100vh;">
        <h1>Productos (tiempo real)</h1>
        <form id="createForm">
            <input type="text"   name="name"     placeholder="Nombre"    required />
            <input type="number" name="price"    placeholder="Precio"    required />
            <input type="text"   name="category" placeholder="Categoría" required />
            <input type="number" name="stock"    placeholder="Stock"     required />
            <button type="submit">Crear</button>
        </form>
        <ul id="prodList">
            <li>Nombre — Precio — Categoria — Stock</li>
            {{#each products}}
                <li data-id="{{_id}}">
                {{name}} — ${{price}} — {{category}} — {{stock}}
                <button data-del="{{_id}}" style="margin-left:8px">Eliminar</button>
                </li>
            {{else}}
                <li>No hay productos.</li>
            {{/each}}
        </ul>
    </section>
    {{> footer}}
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  const form   = document.getElementById('createForm');
  const list   = document.getElementById('prodList');

  function headerRow() {
    return `<li><strong>Nombre</strong> — <strong>Precio</strong> — <strong>Categoría</strong> — <strong>Stock</strong></li>`;
  }

  function itemRow(p) {
    return `
      <li data-id="${p._id}">
        <span><strong>${p.name}</strong> — $${p.price} — ${p.category} — ${p.stock}</span>
        <button data-del="${p._id}" style="margin-left:8px">Eliminar</button>
      </li>
    `;
  }

  function renderProducts(products = []) {
    if (!Array.isArray(products) || products.length === 0) {
      list.innerHTML = headerRow() + `<li>No hay productos.</li>`;
      return;
    }
    list.innerHTML = headerRow() + products.map(itemRow).join('');
  }

  socket.on('products:update', (products) => {
    renderProducts(products);
  });

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault()
      const fd = new FormData(form)
      const body = Object.fromEntries(fd.entries())
      body.price = Number(body.price)
      body.stock = Number(body.stock)

      const res = await fetch('/api/products', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body)
      })
      if (!res.ok) {
        const msg = await res.text()
        alert('Error creando: ' + msg)
        return
      }
      form.reset()
    });
  }

  document.addEventListener('click', async (e) => {
    const btn = e.target.closest('button[data-del]')
    if (!btn) {
      return
    }
    const id = btn.dataset.del
    const res = await fetch(`/api/products/${id}`, { method: 'DELETE' })
    if (!res.ok) {
      alert('Error eliminando')
    }
  });
</script>



<style>
  body {
    font-family: Arial, sans-serif;
    background: #f8f8f8;
    margin: 0;
    padding: 0 12px 32px;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .container {
    width: 100%;
    max-width: 900px;
    margin: 0 auto;
  }

  h1 {
    text-align: center;
    margin: 18px 0;
  }

  #createForm {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr 1fr auto;
    gap: 10px;
    background: #fff;
    padding: 12px;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    margin-bottom: 16px;
  }

  #createForm input {
    padding: 8px 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
  }

  #createForm button {
    background: #007bff;
    color: #fff;
    border: none;
    padding: 8px 14px;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    transition: background .2s, transform .02s;
    white-space: nowrap;
  }
  #createForm button:hover { background: #005ec2; }
  #createForm button:active { transform: translateY(1px); }

  #prodList {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    grid-template-columns: 1fr;
    gap: 8px;
  }

  #prodList li {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #fff;
    padding: 12px 14px;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    font-size: 15px;
    color: #222;
  }

  #prodList li button {
    background: #dc3545;
    color: #fff;
    border: none;
    padding: 6px 10px;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    transition: background .2s, transform .02s;
  }
  #prodList li button:hover { background: #b02a37; }
  #prodList li button:active { transform: translateY(1px); }

  @media (max-width: 800px) {
    #createForm {
      grid-template-columns: 1fr 1fr;
    }
    #createForm button {
      grid-column: 1 / -1;
      justify-self: end;
    }
  }
</style>

